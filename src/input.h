#pragma once
#include "SDL.h"
#include "imgui_impl_sdl2.h"
#include "mouse.h"

#define KEYSLENGTH 85

const enum Keys
{
	A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
	N0, N1, N2, N3, N4, N5, N6, N7, N8, N9,
	F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
	RETURN, ESCAPE, BACKSPACE, TAB, SPACE, MIN, PLUS, EQUALS, LBRACKET, RBRACKET, BACKSLASH, SEMICOLON, QUOTE, COMMA, PERIOD, SLASH, CAPSLOCK,
	PRINTSCREEN, SCROLLLOCK, PAUSE, HOME, END, PAGEUP, PAGEDOWN, INSERT, DELETE, LEFT, RIGHT, UP, DOWN, LCTRL, LSHIFT, LALT, RCTRL, RSHIFT, RALT,
	UNKNOWN
};

class Input
{
public:
	struct Key
	{
		Keys key;
		SDL_Scancode sdlk;

		Key(Keys key = UNKNOWN, SDL_Scancode sdlk = SDL_SCANCODE_UNKNOWN)
		{
			this->key = key;
			this->sdlk = sdlk;
		}

		bool Down() const;
		bool Hold() const;
		bool Up() const;
		void RegisterInput(const Uint8* key) const;

	private:
		mutable bool down = false;
		mutable bool hold = false;
	};

	bool running = true;

	Mouse mouse;
	Camera* camera = nullptr;
	const Key input[85] =
	{
Key(A, SDL_SCANCODE_A),
Key(B, SDL_SCANCODE_B),
Key(C, SDL_SCANCODE_C),
Key(D, SDL_SCANCODE_D),
Key(E, SDL_SCANCODE_E),
Key(F, SDL_SCANCODE_F),
Key(G, SDL_SCANCODE_G),
Key(H, SDL_SCANCODE_H),
Key(I, SDL_SCANCODE_I),
Key(J, SDL_SCANCODE_J),
Key(K, SDL_SCANCODE_K),
Key(L, SDL_SCANCODE_L),
Key(M, SDL_SCANCODE_M),
Key(N, SDL_SCANCODE_N),
Key(O, SDL_SCANCODE_O),
Key(P, SDL_SCANCODE_P),
Key(Q, SDL_SCANCODE_Q),
Key(R, SDL_SCANCODE_R),
Key(S, SDL_SCANCODE_S),
Key(T, SDL_SCANCODE_T),
Key(U, SDL_SCANCODE_U),
Key(V, SDL_SCANCODE_V),
Key(W, SDL_SCANCODE_W),
Key(X, SDL_SCANCODE_X),
Key(Y, SDL_SCANCODE_Y),
Key(Z, SDL_SCANCODE_Z),
Key(N0, SDL_SCANCODE_0),
Key(N1, SDL_SCANCODE_1),
Key(N2, SDL_SCANCODE_2),
Key(N3, SDL_SCANCODE_3),
Key(N4, SDL_SCANCODE_4),
Key(N5, SDL_SCANCODE_5),
Key(N6, SDL_SCANCODE_6),
Key(N7, SDL_SCANCODE_7),
Key(N8, SDL_SCANCODE_8),
Key(N9, SDL_SCANCODE_9),
Key(F1, SDL_SCANCODE_F1),
Key(F2, SDL_SCANCODE_F2),
Key(F3, SDL_SCANCODE_F3),
Key(F4, SDL_SCANCODE_F4),
Key(F5, SDL_SCANCODE_F5),
Key(F6, SDL_SCANCODE_F6),
Key(F7, SDL_SCANCODE_F7),
Key(F8, SDL_SCANCODE_F8),
Key(F9, SDL_SCANCODE_F9),
Key(F10, SDL_SCANCODE_F10),
Key(F11, SDL_SCANCODE_F11),
Key(F12, SDL_SCANCODE_F12),
Key(RETURN, SDL_SCANCODE_RETURN),
Key(ESCAPE, SDL_SCANCODE_ESCAPE),
Key(BACKSPACE, SDL_SCANCODE_BACKSPACE),
Key(TAB, SDL_SCANCODE_TAB),
Key(SPACE, SDL_SCANCODE_SPACE),
Key(MIN, SDL_SCANCODE_MINUS),
Key(EQUALS, SDL_SCANCODE_EQUALS),
Key(LBRACKET, SDL_SCANCODE_LEFTBRACKET),
Key(RBRACKET, SDL_SCANCODE_RIGHTBRACKET),
Key(BACKSLASH, SDL_SCANCODE_BACKSLASH),
Key(SEMICOLON, SDL_SCANCODE_SEMICOLON),
Key(QUOTE, SDL_SCANCODE_APOSTROPHE),
Key(COMMA, SDL_SCANCODE_COMMA),
Key(PERIOD, SDL_SCANCODE_PERIOD),
Key(SLASH, SDL_SCANCODE_SLASH),
Key(CAPSLOCK, SDL_SCANCODE_CAPSLOCK),
Key(PRINTSCREEN, SDL_SCANCODE_PRINTSCREEN),
Key(SCROLLLOCK, SDL_SCANCODE_SCROLLLOCK),
Key(PAUSE, SDL_SCANCODE_PAUSE),
Key(HOME, SDL_SCANCODE_HOME),
Key(END, SDL_SCANCODE_END),
Key(PAGEUP, SDL_SCANCODE_PAGEUP),
Key(PAGEDOWN, SDL_SCANCODE_PAGEDOWN),
Key(INSERT, SDL_SCANCODE_INSERT),
Key(DELETE, SDL_SCANCODE_DELETE),
Key(LEFT, SDL_SCANCODE_LEFT),
Key(RIGHT, SDL_SCANCODE_RIGHT),
Key(UP, SDL_SCANCODE_UP),
Key(DOWN, SDL_SCANCODE_DOWN),
Key(LCTRL, SDL_SCANCODE_LCTRL),
Key(LSHIFT, SDL_SCANCODE_LSHIFT),
Key(LALT, SDL_SCANCODE_LALT),
Key(RCTRL, SDL_SCANCODE_RCTRL),
Key(RSHIFT, SDL_SCANCODE_RSHIFT),
Key(RALT, SDL_SCANCODE_RALT),
Key(UNKNOWN, SDL_SCANCODE_UNKNOWN)
	};

public:
	Input(Camera* camera)
	{
		this->camera = camera;
	}

	void SDLEvents();
	void UpdateMouse();
	void Update(float deltaTime);
	void ProcessInput();
	void RegisterInput(const Uint8* key) const;
};